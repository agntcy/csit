# SPDX-FileCopyrightText: Copyright (c) 2025 Cisco and/or its affiliates.
# SPDX-License-Identifier: Apache-2.0

---
version: '3'

silent: true

vars:
  KIND_CLUSTER_NAME: '{{ .KIND_CLUSTER_NAME | default "phoenix-test" }}'

  ## Image config
  IMAGE_REPO: '{{ .IMAGE_REPO | default "ghcr.io/agntcy" }}'
  DIRECTORY_IMAGE_TAG: '{{ .DIRECTORY_IMAGE_TAG | default "v0.0.2" }}'
  GATEWAY_IMAGE_TAG: '{{ .GATEWAY_IMAGE_TAG | default "0.0.1-rc0-43-g21a108b" }}'

  IMAGE_BAKE_OPTS: '{{ .IMAGE_BAKE_OPTS | default "--set *.platform=linux/arm64" }}'

  AZURE_OPENAI_API_KEY: '{{ .AZURE_OPENAI_API_KEY | default "" }}'
  AZURE_OPENAI_ENDPOINT: '{{ .AZURE_OPENAI_ENDPOINT | default "" }}'


tasks:
  default:
    cmds:
      - task -l

  kind:create:
    desc: Create kind cluster
    cmds:
      - kind create cluster --name {{.KIND_CLUSTER_NAME}} --wait 60s || true
      - kubectl cluster-info --context kind-{{.KIND_CLUSTER_NAME}}
      - task: kind:load-images

  kind:destroy:
    desc: Destroy kind cluster
    cmds:
      - kind delete cluster --name {{.KIND_CLUSTER_NAME}}

  kind:load-images:
    internal: true
    cmds:
      # pull images
      # - docker pull {{.IMAGE_REPO}}/phoenix-directory-apiserver:{{.DIRECTORY_IMAGE_TAG}}
      - docker pull {{.IMAGE_REPO}}/agp/agw:{{.GATEWAY_IMAGE_TAG}}
      # load images
      # - kind load docker-image {{.IMAGE_REPO}}/phoenix-directory-apiserver:{{.DIRECTORY_IMAGE_TAG}} --name {{.KIND_CLUSTER_NAME}}
      - kind load docker-image {{.IMAGE_REPO}}/apg/agw:{{.GATEWAY_IMAGE_TAG}} --name {{.KIND_CLUSTER_NAME}}

  # k8s:port-forward:setup:
  #   internal: true
  #   cmds:
  #     - kubectl port-forward svc/agntcy-directory-apiserver -n default 8888 &
  #     - sleep 1

  # k8s:port-forward:teardown:
  #   internal: true
  #   cmds:
  #     - kill -9 $(ps aux | grep port-forward | grep agntcy-directory-apiserver | awk '{print $2}') || true

  k8s:port-forward:setup:gateway:
    internal: true
    cmds:
      - kubectl port-forward svc/agntcy-agp-gateway -n default 46357 &
      - sleep 1

  k8s:port-forward:teardown:gateway:
    internal: true
    cmds:
      - kill -9 $(ps aux | grep port-forward | grep agntcy-agp-gateway | awk '{print $2}') || true

  # test:env:directory:deploy:
  #   desc: Deploy Phoenix directory test env
  #   vars:
  #     HELM_NAMESPACE:  '{{ .HELM_NAMESPACE | default "default" }}'
  #     REGCRED_CREATE:  '{{ .REGCRED_CREATE | default "false" }}'
  #   cmds:
  #     - |
  #       helm dependency build ./agntcy-directory/components/helm
  #       helm upgrade agntcy-directory \
  #         ./agntcy-directory/components/helm \
  #         --set agntcy-directory.apiserver.image.tag="{{ .DIRECTORY_IMAGE_TAG }}" \
  #         --set regcred.create="{{ .REGCRED_CREATE }}" \
  #         --set agntcy-directory.apiserver.config.ipfs_api_address="http://agntcy-directory-ipfs.{{ .HELM_NAMESPACE  }}.svc.cluster.local:10125" \
  #         --namespace {{ .HELM_NAMESPACE }} \
  #         --create-namespace \
  #         --install \
  #         --wait \
  #         --wait-for-jobs \
  #         --timeout "15m"

  # test:env:directory:cleanup:
  #   desc: Remove Phoenix directory test env
  #   vars:
  #     HELM_NAMESPACE: '{{ .HELM_NAMESPACE | default "default" }}'
  #   cmds:
  #     - helm delete --namespace {{ .HELM_NAMESPACE }} phoenix-directory

  test:env:gateway:deploy:
    desc: Deploy Phoenix gateway test env
    vars:
      HELM_NAMESPACE:  '{{ .HELM_NAMESPACE | default "default" }}'
    cmds:
      - |
        helm dependency build ./agntcy-agp/components/helm
        helm upgrade agntcy-agp \
          ./agntcy-agp/components/helm \
          --set gateway.image.tag="{{ .GATEWAY_IMAGE_TAG }}" \
          --namespace {{ .HELM_NAMESPACE }} \
          --create-namespace \
          --install \
          --wait \
          --wait-for-jobs \
          --timeout "15m"

  test:env:gateway:cleanup:
    desc: Remove Phoenix gateway test env
    vars:
      HELM_NAMESPACE: '{{ .HELM_NAMESPACE | default "default" }}'
    cmds:
      - helm delete --namespace {{ .HELM_NAMESPACE }} agntcy-agp

  # test:directory:
  #   desc: Directory test
  #   cmds:
  #     - task: k8s:port-forward:setup
  #     - defer: { task: k8s:port-forward:teardown }
  #     - defer: { task: manifests:cleanup }
  #     - IMAGE_REPO={{.IMAGE_REPO}} DIRECTORY_IMAGE_TAG={{.DIRECTORY_IMAGE_TAG}} go test ./agntcy-directory/tests -v -failfast -test.v -test.paniconexit0 -ginkgo.timeout 30m -timeout 30m -ginkgo.v

  # test:directory:compiler:
  #   desc: Phoenix compiler test
  #   cmds:
  #     - docker pull {{.IMAGE_REPO}}/phoenix-directory-phoenixctl:{{.DIRECTORY_IMAGE_TAG}}
  #     - IMAGE_REPO={{.IMAGE_REPO}} DIRECTORY_IMAGE_TAG={{.DIRECTORY_IMAGE_TAG}} go test ./agntcy-directory/tests -v -failfast -test.v -test.paniconexit0 -ginkgo.timeout 10m -timeout 10m -ginkgo.v -ginkgo.focus "agent compilation"

  # test:directory:push:
  #   desc: Directory agent push test
  #   cmds:
  #     - task: k8s:port-forward:setup
  #     - defer: { task: k8s:port-forward:teardown }
  #     - defer: { task: manifests:cleanup }
  #     - IMAGE_REPO={{.IMAGE_REPO}} DIRECTORY_IMAGE_TAG={{.DIRECTORY_IMAGE_TAG}} go test ./agntcy-directory/tests -v -failfast -test.v -test.paniconexit0 -ginkgo.timeout 30m -timeout 30m -ginkgo.v -ginkgo.focus "Phoenix agent push tests"

  test:unit:
    desc: Run unit tests
    cmds:
      - go -C report/confluence test ./...

  test:samples:upload_report:
    desc: Upload test report to confluence
    env:
      CONFLUENCE_LOCATION: '{{ .CONFLUENCE_LOCATION }}'
      CONFLUENCE_USERNAME: '{{ .CONFLUENCE_USERNAME }}'
      CONFLUENCE_PAT: '{{ .CONFLUENCE_PAT }}'
      CONFLUENCE_SPACE_ID: '{{ .CONFLUENCE_SPACE_ID }}'
      CONFLUENCE_PARENT_ID: '{{ .CONFLUENCE_PARENT_ID }}'
    cmds:
      - |
        FILES=("../samples/agents/report.json" "../samples/autogen/semantic-router/report.json" "../samples/crewai/simple/report.json" "../samples/evaluation/report.json" "../samples/langgraph/research/report.json" "../samples/llama-deploy/llama-sum/report.json")

        for FILE in "${FILES[@]}"; do
          if [ -f "$FILE" ]; then
            echo "Uploading report for $FILE"
            go run report/main.go -filePath="$FILE" -runID="${{.RUN_ID}}"
          else
            echo "File $FILE not found."
          fi
        done

  build:gateway:agentic-apps:
    desc: Build agentic containers and load them
    dir: ./agntcy-agp/agentic-apps
    cmds:
      - docker buildx bake {{ .IMAGE_BAKE_OPTS }} --load

  relase:gateway:agentic-apps:
    desc: Build agentic containers and release them
    dir: ./agntcy-agp/agentic-apps
    cmds:
      - docker buildx bake {{ .IMAGE_BAKE_OPTS }} --push

  test:autogen-agent:run:
    internal: true
    cmds:
      - |
        hostNetFlag=""
        hostMachine=http://host.docker.internal:46357
        unameOut=$(uname -s)
        case ${unameOut} in
            Linux*)
              hostMachine=http://127.0.0.1:46357
              hostNetFlag="--net=host"
            ;;
            Darwin*)
              hostMachine=http://host.docker.internal:46357
            ;;
            *)
        esac
        echo "gw host: ${hostMachine}"

        docker run -d --rm \
        -e AZURE_OPENAI_API_KEY={{.AZURE_OPENAI_API_KEY}} \
        -e AZURE_OPENAI_ENDPOINT={{.AZURE_OPENAI_ENDPOINT}} \
        ${hostNetFlag} \
        --name autogen-agent \
        {{.IMAGE_REPO}}/csit/test-autogen-agent:v0.0.0-dev \
        poetry run python autogen_agent.py -g ${hostMachine}

  test:autogen-agent:remove:
    internal: true
    cmds:
      - docker stop $(docker ps -a --no-trunc --filter name=^/autogen-agent$ -q)

  test:gateway:
    desc: Gateway test
    cmds:
      - task: k8s:port-forward:setup:gateway
      - defer: { task: k8s:port-forward:teardown:gateway }
      - task: test:autogen-agent:run
      - defer: { task: test:autogen-agent:remove }
      - IMAGE_REPO={{.IMAGE_REPO}} go test ./agntcy-agp/tests -v -failfast -test.v -test.paniconexit0 -ginkgo.timeout 30m -timeout 30m -ginkgo.v
